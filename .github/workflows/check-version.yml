name: Check Next Version

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions: read-all

jobs:
  check_version:
    name: Check and save next version
    if: ${{ github.repository == 'sws2apps/organized-app' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout for release preparation
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: main
          persist-credentials: false

      - name: Use Node.js LTS version
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: lts/Jod

      - name: Install package dependencies
        run: npm ci
      
      - name: Run semantic-release in dry-run and save log
        run: |
          npx semantic-release --dry-run > release.log || true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Extract next version from log
        id: extract_version
        run: |
          VERSION=$(grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' release.log || echo "unknown")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Create organized-next.json
        run: |
              cat <<EOF > organized-next.json
              {
                "schemaVersion": 1,
                "label": "next version",
                "message": "${VERSION}",
                "color": "blue"
              }
              EOF
        env:
          VERSION: ${{ env.VERSION }}

      - name: Update Gist with badge
        env:
          GIST_ID: 8d98acc3c934ff9dc191a0131135c4cb
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          FILE_NAME="organized-next.json"
          JSON_CONTENT=$(jq -c . < $FILE_NAME)
          curl -X PATCH "https://api.github.com/gists/${GIST_ID}" \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"files\": {\"$FILE_NAME\": {\"content\": \"$JSON_CONTENT\"}}}"
